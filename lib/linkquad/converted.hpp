                namespace request_part {
                    struct everyNth_t { typedef uint16_t type; type everyNth; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 0; void set(const uint8_t*& v){memcpy(&everyNth, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &everyNth, sizeof(type)); v += sizeof(type); } }; typedef everyNth_t everyNth;
                    template<int N>
                    struct ids_t { typedef uint8_t type[N]; type ids; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 1; void set(const uint8_t*& v){memcpy(&ids, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ids, sizeof(type)); v += sizeof(type); } }; 
                    struct ids_cnt_t { typedef uint8_t type; type ids_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 2; void set(const uint8_t*& v){memcpy(&ids_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ids_cnt, sizeof(type)); v += sizeof(type); } }; typedef ids_cnt_t ids_cnt;
                }

                namespace SSMCU {
                    typedef request_part::DataRequestPart<MSG_SMCU_DATA_PART_REQUEST, 66> Part;

                    struct iReftime_t { typedef uint32_t type; type iReftime; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 0; void set(const uint8_t*& v){memcpy(&iReftime, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iReftime, sizeof(type)); v += sizeof(type); } }; typedef iReftime_t iReftime;
                    struct gyro_data_0_t { typedef int16_t type; type gyro_data_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 1; void set(const uint8_t*& v){memcpy(&gyro_data_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_data_0, sizeof(type)); v += sizeof(type); } }; typedef gyro_data_0_t gyro_data_0;
                    struct gyro_data_1_t { typedef int16_t type; type gyro_data_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 2; void set(const uint8_t*& v){memcpy(&gyro_data_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_data_1, sizeof(type)); v += sizeof(type); } }; typedef gyro_data_1_t gyro_data_1;
                    struct gyro_data_2_t { typedef int16_t type; type gyro_data_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 3; void set(const uint8_t*& v){memcpy(&gyro_data_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_data_2, sizeof(type)); v += sizeof(type); } }; typedef gyro_data_2_t gyro_data_2;
                    struct gyro_raw_0_t { typedef int16_t type; type gyro_raw_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 4; void set(const uint8_t*& v){memcpy(&gyro_raw_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_raw_0, sizeof(type)); v += sizeof(type); } }; typedef gyro_raw_0_t gyro_raw_0;
                    struct gyro_raw_1_t { typedef int16_t type; type gyro_raw_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 5; void set(const uint8_t*& v){memcpy(&gyro_raw_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_raw_1, sizeof(type)); v += sizeof(type); } }; typedef gyro_raw_1_t gyro_raw_1;
                    struct gyro_raw_2_t { typedef int16_t type; type gyro_raw_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 6; void set(const uint8_t*& v){memcpy(&gyro_raw_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_raw_2, sizeof(type)); v += sizeof(type); } }; typedef gyro_raw_2_t gyro_raw_2;
                    struct gyro_temp_raw_0_t { typedef int16_t type; type gyro_temp_raw_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 7; void set(const uint8_t*& v){memcpy(&gyro_temp_raw_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_temp_raw_0, sizeof(type)); v += sizeof(type); } }; typedef gyro_temp_raw_0_t gyro_temp_raw_0;
                    struct gyro_temp_raw_1_t { typedef int16_t type; type gyro_temp_raw_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 8; void set(const uint8_t*& v){memcpy(&gyro_temp_raw_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_temp_raw_1, sizeof(type)); v += sizeof(type); } }; typedef gyro_temp_raw_1_t gyro_temp_raw_1;
                    struct gyro_temp_raw_2_t { typedef int16_t type; type gyro_temp_raw_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 9; void set(const uint8_t*& v){memcpy(&gyro_temp_raw_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gyro_temp_raw_2, sizeof(type)); v += sizeof(type); } }; typedef gyro_temp_raw_2_t gyro_temp_raw_2;
                    struct accel_raw_0_t { typedef int16_t type; type accel_raw_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 10; void set(const uint8_t*& v){memcpy(&accel_raw_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &accel_raw_0, sizeof(type)); v += sizeof(type); } }; typedef accel_raw_0_t accel_raw_0;
                    struct accel_raw_1_t { typedef int16_t type; type accel_raw_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 11; void set(const uint8_t*& v){memcpy(&accel_raw_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &accel_raw_1, sizeof(type)); v += sizeof(type); } }; typedef accel_raw_1_t accel_raw_1;
                    struct accel_raw_2_t { typedef int16_t type; type accel_raw_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 12; void set(const uint8_t*& v){memcpy(&accel_raw_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &accel_raw_2, sizeof(type)); v += sizeof(type); } }; typedef accel_raw_2_t accel_raw_2;
                    struct micromag_0_t { typedef int16_t type; type micromag_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 13; void set(const uint8_t*& v){memcpy(&micromag_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &micromag_0, sizeof(type)); v += sizeof(type); } }; typedef micromag_0_t micromag_0;
                    struct micromag_1_t { typedef int16_t type; type micromag_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 14; void set(const uint8_t*& v){memcpy(&micromag_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &micromag_1, sizeof(type)); v += sizeof(type); } }; typedef micromag_1_t micromag_1;
                    struct micromag_2_t { typedef int16_t type; type micromag_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 15; void set(const uint8_t*& v){memcpy(&micromag_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &micromag_2, sizeof(type)); v += sizeof(type); } }; typedef micromag_2_t micromag_2;
                    struct ahrs_0_t { typedef int16_t type; type ahrs_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 16; void set(const uint8_t*& v){memcpy(&ahrs_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ahrs_0, sizeof(type)); v += sizeof(type); } }; typedef ahrs_0_t ahrs_0;
                    struct ahrs_1_t { typedef int16_t type; type ahrs_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 17; void set(const uint8_t*& v){memcpy(&ahrs_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ahrs_1, sizeof(type)); v += sizeof(type); } }; typedef ahrs_1_t ahrs_1;
                    struct ahrs_2_t { typedef int16_t type; type ahrs_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 18; void set(const uint8_t*& v){memcpy(&ahrs_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ahrs_2, sizeof(type)); v += sizeof(type); } }; typedef ahrs_2_t ahrs_2;
                    struct compass_heading_t { typedef int16_t type; type compass_heading; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 19; void set(const uint8_t*& v){memcpy(&compass_heading, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &compass_heading, sizeof(type)); v += sizeof(type); } }; typedef compass_heading_t compass_heading;
                    struct rc_sticks_0_t { typedef int16_t type; type rc_sticks_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 20; void set(const uint8_t*& v){memcpy(&rc_sticks_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_0, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_0_t rc_sticks_0;
                    struct rc_sticks_1_t { typedef int16_t type; type rc_sticks_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 21; void set(const uint8_t*& v){memcpy(&rc_sticks_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_1, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_1_t rc_sticks_1;
                    struct rc_sticks_2_t { typedef int16_t type; type rc_sticks_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 22; void set(const uint8_t*& v){memcpy(&rc_sticks_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_2, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_2_t rc_sticks_2;
                    struct rc_sticks_3_t { typedef int16_t type; type rc_sticks_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 23; void set(const uint8_t*& v){memcpy(&rc_sticks_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_3, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_3_t rc_sticks_3;
                    struct rc_sticks_4_t { typedef int16_t type; type rc_sticks_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 24; void set(const uint8_t*& v){memcpy(&rc_sticks_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_4, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_4_t rc_sticks_4;
                    struct rc_sticks_5_t { typedef int16_t type; type rc_sticks_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 25; void set(const uint8_t*& v){memcpy(&rc_sticks_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_5, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_5_t rc_sticks_5;
                    struct rc_sticks_6_t { typedef int16_t type; type rc_sticks_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 26; void set(const uint8_t*& v){memcpy(&rc_sticks_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_6, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_6_t rc_sticks_6;
                    struct battery_voltage_t { typedef int16_t type; type battery_voltage; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 27; void set(const uint8_t*& v){memcpy(&battery_voltage, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &battery_voltage, sizeof(type)); v += sizeof(type); } }; typedef battery_voltage_t battery_voltage;
                    struct cGPSValid_t { typedef int8_t type; type cGPSValid; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 28; void set(const uint8_t*& v){memcpy(&cGPSValid, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &cGPSValid, sizeof(type)); v += sizeof(type); } }; typedef cGPSValid_t cGPSValid;
                    struct iLatDeg_t { typedef int32_t type; type iLatDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 29; void set(const uint8_t*& v){memcpy(&iLatDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iLatDeg, sizeof(type)); v += sizeof(type); } }; typedef iLatDeg_t iLatDeg;
                    struct iLonDeg_t { typedef int32_t type; type iLonDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 30; void set(const uint8_t*& v){memcpy(&iLonDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iLonDeg, sizeof(type)); v += sizeof(type); } }; typedef iLonDeg_t iLonDeg;
                    struct fAlt_t { typedef float type; type fAlt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 31; void set(const uint8_t*& v){memcpy(&fAlt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &fAlt, sizeof(type)); v += sizeof(type); } }; typedef fAlt_t fAlt;
                    struct iGpsLatDeg_t { typedef int32_t type; type iGpsLatDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 32; void set(const uint8_t*& v){memcpy(&iGpsLatDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsLatDeg, sizeof(type)); v += sizeof(type); } }; typedef iGpsLatDeg_t iGpsLatDeg;
                    struct iGpsLonDeg_t { typedef int32_t type; type iGpsLonDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 33; void set(const uint8_t*& v){memcpy(&iGpsLonDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsLonDeg, sizeof(type)); v += sizeof(type); } }; typedef iGpsLonDeg_t iGpsLonDeg;
                    struct iGpsAlt_t { typedef int32_t type; type iGpsAlt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 34; void set(const uint8_t*& v){memcpy(&iGpsAlt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsAlt, sizeof(type)); v += sizeof(type); } }; typedef iGpsAlt_t iGpsAlt;
                    struct siGpsYawDeg_t { typedef int16_t type; type siGpsYawDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 35; void set(const uint8_t*& v){memcpy(&siGpsYawDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &siGpsYawDeg, sizeof(type)); v += sizeof(type); } }; typedef siGpsYawDeg_t siGpsYawDeg;
                    struct ucGpsStatus_t { typedef uint8_t type; type ucGpsStatus; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 36; void set(const uint8_t*& v){memcpy(&ucGpsStatus, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ucGpsStatus, sizeof(type)); v += sizeof(type); } }; typedef ucGpsStatus_t ucGpsStatus;
                    struct ucGpsStatusFlags_t { typedef uint8_t type; type ucGpsStatusFlags; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 37; void set(const uint8_t*& v){memcpy(&ucGpsStatusFlags, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ucGpsStatusFlags, sizeof(type)); v += sizeof(type); } }; typedef ucGpsStatusFlags_t ucGpsStatusFlags;
                    struct gDop_t { typedef uint16_t type; type gDop; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 38; void set(const uint8_t*& v){memcpy(&gDop, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gDop, sizeof(type)); v += sizeof(type); } }; typedef gDop_t gDop;
                    struct pDop_t { typedef uint16_t type; type pDop; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 39; void set(const uint8_t*& v){memcpy(&pDop, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &pDop, sizeof(type)); v += sizeof(type); } }; typedef pDop_t pDop;
                    struct hDop_t { typedef uint16_t type; type hDop; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 40; void set(const uint8_t*& v){memcpy(&hDop, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &hDop, sizeof(type)); v += sizeof(type); } }; typedef hDop_t hDop;
                    struct vDop_t { typedef uint16_t type; type vDop; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 41; void set(const uint8_t*& v){memcpy(&vDop, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &vDop, sizeof(type)); v += sizeof(type); } }; typedef vDop_t vDop;
                    struct num_SV_t { typedef uint8_t type; type num_SV; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 42; void set(const uint8_t*& v){memcpy(&num_SV, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &num_SV, sizeof(type)); v += sizeof(type); } }; typedef num_SV_t num_SV;
                    struct iGpsVelN_t { typedef int16_t type; type iGpsVelN; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 43; void set(const uint8_t*& v){memcpy(&iGpsVelN, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsVelN, sizeof(type)); v += sizeof(type); } }; typedef iGpsVelN_t iGpsVelN;
                    struct iGpsVelE_t { typedef int16_t type; type iGpsVelE; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 44; void set(const uint8_t*& v){memcpy(&iGpsVelE, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsVelE, sizeof(type)); v += sizeof(type); } }; typedef iGpsVelE_t iGpsVelE;
                    struct iGpsVelD_t { typedef int16_t type; type iGpsVelD; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 45; void set(const uint8_t*& v){memcpy(&iGpsVelD, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsVelD, sizeof(type)); v += sizeof(type); } }; typedef iGpsVelD_t iGpsVelD;
                    struct iGpsSAcc_t { typedef uint16_t type; type iGpsSAcc; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 46; void set(const uint8_t*& v){memcpy(&iGpsSAcc, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsSAcc, sizeof(type)); v += sizeof(type); } }; typedef iGpsSAcc_t iGpsSAcc;
                    struct iGpsPAcc_t { typedef uint16_t type; type iGpsPAcc; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 47; void set(const uint8_t*& v){memcpy(&iGpsPAcc, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsPAcc, sizeof(type)); v += sizeof(type); } }; typedef iGpsPAcc_t iGpsPAcc;
                    struct iGpsHAcc_t { typedef uint16_t type; type iGpsHAcc; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 48; void set(const uint8_t*& v){memcpy(&iGpsHAcc, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsHAcc, sizeof(type)); v += sizeof(type); } }; typedef iGpsHAcc_t iGpsHAcc;
                    struct iGpsVAcc_t { typedef uint16_t type; type iGpsVAcc; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 49; void set(const uint8_t*& v){memcpy(&iGpsVAcc, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsVAcc, sizeof(type)); v += sizeof(type); } }; typedef iGpsVAcc_t iGpsVAcc;
                    struct system_status_t { typedef uint8_t type; type system_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 50; void set(const uint8_t*& v){memcpy(&system_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &system_status, sizeof(type)); v += sizeof(type); } }; typedef system_status_t system_status;
                    struct usiError_t { typedef uint16_t type; type usiError; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 51; void set(const uint8_t*& v){memcpy(&usiError, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &usiError, sizeof(type)); v += sizeof(type); } }; typedef usiError_t usiError;
                    struct remote_controller_status_t { typedef uint8_t type; type remote_controller_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 52; void set(const uint8_t*& v){memcpy(&remote_controller_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &remote_controller_status, sizeof(type)); v += sizeof(type); } }; typedef remote_controller_status_t remote_controller_status;
                    struct adc_0_t { typedef uint16_t type; type adc_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 53; void set(const uint8_t*& v){memcpy(&adc_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &adc_0, sizeof(type)); v += sizeof(type); } }; typedef adc_0_t adc_0;
                    struct adc_1_t { typedef uint16_t type; type adc_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 54; void set(const uint8_t*& v){memcpy(&adc_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &adc_1, sizeof(type)); v += sizeof(type); } }; typedef adc_1_t adc_1;
                    struct adc_2_t { typedef uint16_t type; type adc_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 55; void set(const uint8_t*& v){memcpy(&adc_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &adc_2, sizeof(type)); v += sizeof(type); } }; typedef adc_2_t adc_2;
                    struct ext_uart_crc_error_cnt_t { typedef uint8_t type; type ext_uart_crc_error_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 56; void set(const uint8_t*& v){memcpy(&ext_uart_crc_error_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ext_uart_crc_error_cnt, sizeof(type)); v += sizeof(type); } }; typedef ext_uart_crc_error_cnt_t ext_uart_crc_error_cnt;
                    struct ext_uart_tx_overflow_cnt_t { typedef uint8_t type; type ext_uart_tx_overflow_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 57; void set(const uint8_t*& v){memcpy(&ext_uart_tx_overflow_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ext_uart_tx_overflow_cnt, sizeof(type)); v += sizeof(type); } }; typedef ext_uart_tx_overflow_cnt_t ext_uart_tx_overflow_cnt;
                    struct fAltCF_t { typedef float type; type fAltCF; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 58; void set(const uint8_t*& v){memcpy(&fAltCF, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &fAltCF, sizeof(type)); v += sizeof(type); } }; typedef fAltCF_t fAltCF;
                    struct fVelU_t { typedef float type; type fVelU; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 59; void set(const uint8_t*& v){memcpy(&fVelU, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &fVelU, sizeof(type)); v += sizeof(type); } }; typedef fVelU_t fVelU;
                    struct gps_longitude_origo_t { typedef int type; type gps_longitude_origo; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 60; void set(const uint8_t*& v){memcpy(&gps_longitude_origo, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_longitude_origo, sizeof(type)); v += sizeof(type); } }; typedef gps_longitude_origo_t gps_longitude_origo;
                    struct gps_latitude_origo_t { typedef int type; type gps_latitude_origo; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 61; void set(const uint8_t*& v){memcpy(&gps_latitude_origo, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_latitude_origo, sizeof(type)); v += sizeof(type); } }; typedef gps_latitude_origo_t gps_latitude_origo;
                    struct gps_altitude_origo_t { typedef int type; type gps_altitude_origo; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 62; void set(const uint8_t*& v){memcpy(&gps_altitude_origo, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_altitude_origo, sizeof(type)); v += sizeof(type); } }; typedef gps_altitude_origo_t gps_altitude_origo;
                    struct gps_origo_taken_t { typedef char type; type gps_origo_taken; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 63; void set(const uint8_t*& v){memcpy(&gps_origo_taken, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_origo_taken, sizeof(type)); v += sizeof(type); } }; typedef gps_origo_taken_t gps_origo_taken;
                    struct gps_longitude_m_t { typedef float type; type gps_longitude_m; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 64; void set(const uint8_t*& v){memcpy(&gps_longitude_m, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_longitude_m, sizeof(type)); v += sizeof(type); } }; typedef gps_longitude_m_t gps_longitude_m;
                    struct gps_latitude_m_t { typedef float type; type gps_latitude_m; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 65; void set(const uint8_t*& v){memcpy(&gps_latitude_m, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_latitude_m, sizeof(type)); v += sizeof(type); } }; typedef gps_latitude_m_t gps_latitude_m;
                    struct fHeadCF_t { typedef float type; type fHeadCF; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 66; void set(const uint8_t*& v){memcpy(&fHeadCF, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &fHeadCF, sizeof(type)); v += sizeof(type); } }; typedef fHeadCF_t fHeadCF;
                }

                namespace SCMCU {
                    typedef request_part::DataRequestPart<MSG_CMCU_DATA_PART_REQUEST, 157> Part;

                    struct id_t { typedef int8_t type; type id; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 0; void set(const uint8_t*& v){memcpy(&id, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &id, sizeof(type)); v += sizeof(type); } }; typedef id_t id;
                    struct time_t { typedef uint32_t type; type time; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 1; void set(const uint8_t*& v){memcpy(&time, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &time, sizeof(type)); v += sizeof(type); } }; typedef time_t time;
                    struct logtime_t { typedef uint32_t type; type logtime; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 2; void set(const uint8_t*& v){memcpy(&logtime, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &logtime, sizeof(type)); v += sizeof(type); } }; typedef logtime_t logtime;
                    struct phi_t { typedef float type; type phi; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 3; void set(const uint8_t*& v){memcpy(&phi, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &phi, sizeof(type)); v += sizeof(type); } }; typedef phi_t phi;
                    struct theta_t { typedef float type; type theta; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 4; void set(const uint8_t*& v){memcpy(&theta, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &theta, sizeof(type)); v += sizeof(type); } }; typedef theta_t theta;
                    struct psi_t { typedef float type; type psi; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 5; void set(const uint8_t*& v){memcpy(&psi, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &psi, sizeof(type)); v += sizeof(type); } }; typedef psi_t psi;
                    struct compass_heading_t { typedef float type; type compass_heading; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 6; void set(const uint8_t*& v){memcpy(&compass_heading, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &compass_heading, sizeof(type)); v += sizeof(type); } }; typedef compass_heading_t compass_heading;
                    struct phi_dot_raw_t { typedef float type; type phi_dot_raw; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 7; void set(const uint8_t*& v){memcpy(&phi_dot_raw, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &phi_dot_raw, sizeof(type)); v += sizeof(type); } }; typedef phi_dot_raw_t phi_dot_raw;
                    struct theta_dot_raw_t { typedef float type; type theta_dot_raw; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 8; void set(const uint8_t*& v){memcpy(&theta_dot_raw, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &theta_dot_raw, sizeof(type)); v += sizeof(type); } }; typedef theta_dot_raw_t theta_dot_raw;
                    struct psi_dot_raw_t { typedef float type; type psi_dot_raw; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 9; void set(const uint8_t*& v){memcpy(&psi_dot_raw, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &psi_dot_raw, sizeof(type)); v += sizeof(type); } }; typedef psi_dot_raw_t psi_dot_raw;
                    struct phi_dot_t { typedef float type; type phi_dot; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 10; void set(const uint8_t*& v){memcpy(&phi_dot, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &phi_dot, sizeof(type)); v += sizeof(type); } }; typedef phi_dot_t phi_dot;
                    struct theta_dot_t { typedef float type; type theta_dot; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 11; void set(const uint8_t*& v){memcpy(&theta_dot, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &theta_dot, sizeof(type)); v += sizeof(type); } }; typedef theta_dot_t theta_dot;
                    struct psi_dot_t { typedef float type; type psi_dot; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 12; void set(const uint8_t*& v){memcpy(&psi_dot, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &psi_dot, sizeof(type)); v += sizeof(type); } }; typedef psi_dot_t psi_dot;
                    struct siPhiTemp_t { typedef int16_t type; type siPhiTemp; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 13; void set(const uint8_t*& v){memcpy(&siPhiTemp, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &siPhiTemp, sizeof(type)); v += sizeof(type); } }; typedef siPhiTemp_t siPhiTemp;
                    struct siThetaTemp_t { typedef int16_t type; type siThetaTemp; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 14; void set(const uint8_t*& v){memcpy(&siThetaTemp, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &siThetaTemp, sizeof(type)); v += sizeof(type); } }; typedef siThetaTemp_t siThetaTemp;
                    struct siPsiTemp_t { typedef int16_t type; type siPsiTemp; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 15; void set(const uint8_t*& v){memcpy(&siPsiTemp, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &siPsiTemp, sizeof(type)); v += sizeof(type); } }; typedef siPsiTemp_t siPsiTemp;
                    struct accel_x_raw_t { typedef float type; type accel_x_raw; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 16; void set(const uint8_t*& v){memcpy(&accel_x_raw, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &accel_x_raw, sizeof(type)); v += sizeof(type); } }; typedef accel_x_raw_t accel_x_raw;
                    struct accel_y_raw_t { typedef float type; type accel_y_raw; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 17; void set(const uint8_t*& v){memcpy(&accel_y_raw, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &accel_y_raw, sizeof(type)); v += sizeof(type); } }; typedef accel_y_raw_t accel_y_raw;
                    struct accel_z_raw_t { typedef float type; type accel_z_raw; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 18; void set(const uint8_t*& v){memcpy(&accel_z_raw, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &accel_z_raw, sizeof(type)); v += sizeof(type); } }; typedef accel_z_raw_t accel_z_raw;
                    struct micromag_x_t { typedef float type; type micromag_x; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 19; void set(const uint8_t*& v){memcpy(&micromag_x, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &micromag_x, sizeof(type)); v += sizeof(type); } }; typedef micromag_x_t micromag_x;
                    struct micromag_y_t { typedef float type; type micromag_y; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 20; void set(const uint8_t*& v){memcpy(&micromag_y, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &micromag_y, sizeof(type)); v += sizeof(type); } }; typedef micromag_y_t micromag_y;
                    struct micromag_z_t { typedef float type; type micromag_z; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 21; void set(const uint8_t*& v){memcpy(&micromag_z, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &micromag_z, sizeof(type)); v += sizeof(type); } }; typedef micromag_z_t micromag_z;
                    struct hp_t { typedef float type; type hp; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 22; void set(const uint8_t*& v){memcpy(&hp, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &hp, sizeof(type)); v += sizeof(type); } }; typedef hp_t hp;
                    struct fPressureAltitude_t { typedef float type; type fPressureAltitude; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 23; void set(const uint8_t*& v){memcpy(&fPressureAltitude, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &fPressureAltitude, sizeof(type)); v += sizeof(type); } }; typedef fPressureAltitude_t fPressureAltitude;
                    struct cGPSValid_t { typedef int8_t type; type cGPSValid; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 24; void set(const uint8_t*& v){memcpy(&cGPSValid, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &cGPSValid, sizeof(type)); v += sizeof(type); } }; typedef cGPSValid_t cGPSValid;
                    struct cGPSStatus_t { typedef uint8_t type; type cGPSStatus; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 25; void set(const uint8_t*& v){memcpy(&cGPSStatus, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &cGPSStatus, sizeof(type)); v += sizeof(type); } }; typedef cGPSStatus_t cGPSStatus;
                    struct iGpsLatDeg_t { typedef int32_t type; type iGpsLatDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 26; void set(const uint8_t*& v){memcpy(&iGpsLatDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsLatDeg, sizeof(type)); v += sizeof(type); } }; typedef iGpsLatDeg_t iGpsLatDeg;
                    struct iGpsLonDeg_t { typedef int32_t type; type iGpsLonDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 27; void set(const uint8_t*& v){memcpy(&iGpsLonDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsLonDeg, sizeof(type)); v += sizeof(type); } }; typedef iGpsLonDeg_t iGpsLonDeg;
                    struct iGpsAlt_t { typedef uint32_t type; type iGpsAlt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 28; void set(const uint8_t*& v){memcpy(&iGpsAlt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsAlt, sizeof(type)); v += sizeof(type); } }; typedef iGpsAlt_t iGpsAlt;
                    struct ucGpsStatusFlags_t { typedef uint8_t type; type ucGpsStatusFlags; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 29; void set(const uint8_t*& v){memcpy(&ucGpsStatusFlags, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &ucGpsStatusFlags, sizeof(type)); v += sizeof(type); } }; typedef ucGpsStatusFlags_t ucGpsStatusFlags;
                    struct gDop_t { typedef uint16_t type; type gDop; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 30; void set(const uint8_t*& v){memcpy(&gDop, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gDop, sizeof(type)); v += sizeof(type); } }; typedef gDop_t gDop;
                    struct pDop_t { typedef uint16_t type; type pDop; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 31; void set(const uint8_t*& v){memcpy(&pDop, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &pDop, sizeof(type)); v += sizeof(type); } }; typedef pDop_t pDop;
                    struct hDop_t { typedef uint16_t type; type hDop; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 32; void set(const uint8_t*& v){memcpy(&hDop, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &hDop, sizeof(type)); v += sizeof(type); } }; typedef hDop_t hDop;
                    struct vDop_t { typedef uint16_t type; type vDop; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 33; void set(const uint8_t*& v){memcpy(&vDop, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &vDop, sizeof(type)); v += sizeof(type); } }; typedef vDop_t vDop;
                    struct num_SV_t { typedef uint8_t type; type num_SV; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 34; void set(const uint8_t*& v){memcpy(&num_SV, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &num_SV, sizeof(type)); v += sizeof(type); } }; typedef num_SV_t num_SV;
                    struct iGpsVelN_t { typedef int16_t type; type iGpsVelN; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 35; void set(const uint8_t*& v){memcpy(&iGpsVelN, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsVelN, sizeof(type)); v += sizeof(type); } }; typedef iGpsVelN_t iGpsVelN;
                    struct iGpsVelE_t { typedef int16_t type; type iGpsVelE; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 36; void set(const uint8_t*& v){memcpy(&iGpsVelE, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsVelE, sizeof(type)); v += sizeof(type); } }; typedef iGpsVelE_t iGpsVelE;
                    struct iGpsVelD_t { typedef int16_t type; type iGpsVelD; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 37; void set(const uint8_t*& v){memcpy(&iGpsVelD, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsVelD, sizeof(type)); v += sizeof(type); } }; typedef iGpsVelD_t iGpsVelD;
                    struct iGpsSAcc_t { typedef uint16_t type; type iGpsSAcc; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 38; void set(const uint8_t*& v){memcpy(&iGpsSAcc, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsSAcc, sizeof(type)); v += sizeof(type); } }; typedef iGpsSAcc_t iGpsSAcc;
                    struct iGpsPAcc_t { typedef uint16_t type; type iGpsPAcc; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 39; void set(const uint8_t*& v){memcpy(&iGpsPAcc, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsPAcc, sizeof(type)); v += sizeof(type); } }; typedef iGpsPAcc_t iGpsPAcc;
                    struct iGpsHAcc_t { typedef uint16_t type; type iGpsHAcc; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 40; void set(const uint8_t*& v){memcpy(&iGpsHAcc, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsHAcc, sizeof(type)); v += sizeof(type); } }; typedef iGpsHAcc_t iGpsHAcc;
                    struct iGpsVAcc_t { typedef uint16_t type; type iGpsVAcc; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 41; void set(const uint8_t*& v){memcpy(&iGpsVAcc, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &iGpsVAcc, sizeof(type)); v += sizeof(type); } }; typedef iGpsVAcc_t iGpsVAcc;
                    struct GpsHeadingDeg_t { typedef float type; type GpsHeadingDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 42; void set(const uint8_t*& v){memcpy(&GpsHeadingDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &GpsHeadingDeg, sizeof(type)); v += sizeof(type); } }; typedef GpsHeadingDeg_t GpsHeadingDeg;
                    struct rc_sticks_0_t { typedef uint16_t type; type rc_sticks_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 43; void set(const uint8_t*& v){memcpy(&rc_sticks_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_0, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_0_t rc_sticks_0;
                    struct rc_sticks_1_t { typedef uint16_t type; type rc_sticks_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 44; void set(const uint8_t*& v){memcpy(&rc_sticks_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_1, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_1_t rc_sticks_1;
                    struct rc_sticks_2_t { typedef uint16_t type; type rc_sticks_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 45; void set(const uint8_t*& v){memcpy(&rc_sticks_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_2, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_2_t rc_sticks_2;
                    struct rc_sticks_3_t { typedef uint16_t type; type rc_sticks_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 46; void set(const uint8_t*& v){memcpy(&rc_sticks_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_3, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_3_t rc_sticks_3;
                    struct rc_sticks_4_t { typedef uint16_t type; type rc_sticks_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 47; void set(const uint8_t*& v){memcpy(&rc_sticks_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_4, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_4_t rc_sticks_4;
                    struct rc_sticks_5_t { typedef uint16_t type; type rc_sticks_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 48; void set(const uint8_t*& v){memcpy(&rc_sticks_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_5, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_5_t rc_sticks_5;
                    struct rc_sticks_6_t { typedef uint16_t type; type rc_sticks_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 49; void set(const uint8_t*& v){memcpy(&rc_sticks_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_sticks_6, sizeof(type)); v += sizeof(type); } }; typedef rc_sticks_6_t rc_sticks_6;
                    struct servo_output_0_t { typedef uint16_t type; type servo_output_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 50; void set(const uint8_t*& v){memcpy(&servo_output_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_output_0, sizeof(type)); v += sizeof(type); } }; typedef servo_output_0_t servo_output_0;
                    struct servo_output_1_t { typedef uint16_t type; type servo_output_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 51; void set(const uint8_t*& v){memcpy(&servo_output_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_output_1, sizeof(type)); v += sizeof(type); } }; typedef servo_output_1_t servo_output_1;
                    struct servo_output_2_t { typedef uint16_t type; type servo_output_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 52; void set(const uint8_t*& v){memcpy(&servo_output_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_output_2, sizeof(type)); v += sizeof(type); } }; typedef servo_output_2_t servo_output_2;
                    struct servo_output_3_t { typedef uint16_t type; type servo_output_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 53; void set(const uint8_t*& v){memcpy(&servo_output_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_output_3, sizeof(type)); v += sizeof(type); } }; typedef servo_output_3_t servo_output_3;
                    struct servo_output_4_t { typedef uint16_t type; type servo_output_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 54; void set(const uint8_t*& v){memcpy(&servo_output_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_output_4, sizeof(type)); v += sizeof(type); } }; typedef servo_output_4_t servo_output_4;
                    struct servo_output_5_t { typedef uint16_t type; type servo_output_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 55; void set(const uint8_t*& v){memcpy(&servo_output_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_output_5, sizeof(type)); v += sizeof(type); } }; typedef servo_output_5_t servo_output_5;
                    struct servo_output_6_t { typedef uint16_t type; type servo_output_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 56; void set(const uint8_t*& v){memcpy(&servo_output_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_output_6, sizeof(type)); v += sizeof(type); } }; typedef servo_output_6_t servo_output_6;
                    struct servo_mixer_input_0_t { typedef int16_t type; type servo_mixer_input_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 57; void set(const uint8_t*& v){memcpy(&servo_mixer_input_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_mixer_input_0, sizeof(type)); v += sizeof(type); } }; typedef servo_mixer_input_0_t servo_mixer_input_0;
                    struct servo_mixer_input_1_t { typedef int16_t type; type servo_mixer_input_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 58; void set(const uint8_t*& v){memcpy(&servo_mixer_input_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_mixer_input_1, sizeof(type)); v += sizeof(type); } }; typedef servo_mixer_input_1_t servo_mixer_input_1;
                    struct servo_mixer_input_2_t { typedef int16_t type; type servo_mixer_input_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 59; void set(const uint8_t*& v){memcpy(&servo_mixer_input_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_mixer_input_2, sizeof(type)); v += sizeof(type); } }; typedef servo_mixer_input_2_t servo_mixer_input_2;
                    struct servo_mixer_input_3_t { typedef int16_t type; type servo_mixer_input_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 60; void set(const uint8_t*& v){memcpy(&servo_mixer_input_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_mixer_input_3, sizeof(type)); v += sizeof(type); } }; typedef servo_mixer_input_3_t servo_mixer_input_3;
                    struct servo_mixer_input_4_t { typedef int16_t type; type servo_mixer_input_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 61; void set(const uint8_t*& v){memcpy(&servo_mixer_input_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_mixer_input_4, sizeof(type)); v += sizeof(type); } }; typedef servo_mixer_input_4_t servo_mixer_input_4;
                    struct servo_mixer_input_5_t { typedef int16_t type; type servo_mixer_input_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 62; void set(const uint8_t*& v){memcpy(&servo_mixer_input_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_mixer_input_5, sizeof(type)); v += sizeof(type); } }; typedef servo_mixer_input_5_t servo_mixer_input_5;
                    struct servo_mixer_input_6_t { typedef int16_t type; type servo_mixer_input_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 63; void set(const uint8_t*& v){memcpy(&servo_mixer_input_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &servo_mixer_input_6, sizeof(type)); v += sizeof(type); } }; typedef servo_mixer_input_6_t servo_mixer_input_6;
                    struct rc_aileron_at_ms_t { typedef uint8_t type; type rc_aileron_at_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 64; void set(const uint8_t*& v){memcpy(&rc_aileron_at_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_aileron_at_ms, sizeof(type)); v += sizeof(type); } }; typedef rc_aileron_at_ms_t rc_aileron_at_ms;
                    struct rc_elevator_at_ms_t { typedef uint8_t type; type rc_elevator_at_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 65; void set(const uint8_t*& v){memcpy(&rc_elevator_at_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_elevator_at_ms, sizeof(type)); v += sizeof(type); } }; typedef rc_elevator_at_ms_t rc_elevator_at_ms;
                    struct rc_rudder_at_ms_t { typedef uint8_t type; type rc_rudder_at_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 66; void set(const uint8_t*& v){memcpy(&rc_rudder_at_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_rudder_at_ms, sizeof(type)); v += sizeof(type); } }; typedef rc_rudder_at_ms_t rc_rudder_at_ms;
                    struct rc_throttle_at_ms_t { typedef uint8_t type; type rc_throttle_at_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 67; void set(const uint8_t*& v){memcpy(&rc_throttle_at_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_throttle_at_ms, sizeof(type)); v += sizeof(type); } }; typedef rc_throttle_at_ms_t rc_throttle_at_ms;
                    struct rc_camera_pan_at_ms_t { typedef uint8_t type; type rc_camera_pan_at_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 68; void set(const uint8_t*& v){memcpy(&rc_camera_pan_at_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_camera_pan_at_ms, sizeof(type)); v += sizeof(type); } }; typedef rc_camera_pan_at_ms_t rc_camera_pan_at_ms;
                    struct rc_camera_tilt_at_ms_t { typedef uint8_t type; type rc_camera_tilt_at_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 69; void set(const uint8_t*& v){memcpy(&rc_camera_tilt_at_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &rc_camera_tilt_at_ms, sizeof(type)); v += sizeof(type); } }; typedef rc_camera_tilt_at_ms_t rc_camera_tilt_at_ms;
                    struct targetLonDeg_t { typedef int32_t type; type targetLonDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 70; void set(const uint8_t*& v){memcpy(&targetLonDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &targetLonDeg, sizeof(type)); v += sizeof(type); } }; typedef targetLonDeg_t targetLonDeg;
                    struct targetLatDeg_t { typedef int32_t type; type targetLatDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 71; void set(const uint8_t*& v){memcpy(&targetLatDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &targetLatDeg, sizeof(type)); v += sizeof(type); } }; typedef targetLatDeg_t targetLatDeg;
                    struct targetAltM_t { typedef float type; type targetAltM; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 72; void set(const uint8_t*& v){memcpy(&targetAltM, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &targetAltM, sizeof(type)); v += sizeof(type); } }; typedef targetAltM_t targetAltM;
                    struct targetHeadingDeg_t { typedef float type; type targetHeadingDeg; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 73; void set(const uint8_t*& v){memcpy(&targetHeadingDeg, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &targetHeadingDeg, sizeof(type)); v += sizeof(type); } }; typedef targetHeadingDeg_t targetHeadingDeg;
                    struct battery_voltage_t { typedef int16_t type; type battery_voltage; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 74; void set(const uint8_t*& v){memcpy(&battery_voltage, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &battery_voltage, sizeof(type)); v += sizeof(type); } }; typedef battery_voltage_t battery_voltage;
                    struct spi_status_t { typedef int8_t type; type spi_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 75; void set(const uint8_t*& v){memcpy(&spi_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &spi_status, sizeof(type)); v += sizeof(type); } }; typedef spi_status_t spi_status;
                    struct spi_crc_error_cnt_t { typedef uint8_t type; type spi_crc_error_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 76; void set(const uint8_t*& v){memcpy(&spi_crc_error_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &spi_crc_error_cnt, sizeof(type)); v += sizeof(type); } }; typedef spi_crc_error_cnt_t spi_crc_error_cnt;
                    struct spi_tx_overflow_cnt_t { typedef uint8_t type; type spi_tx_overflow_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 77; void set(const uint8_t*& v){memcpy(&spi_tx_overflow_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &spi_tx_overflow_cnt, sizeof(type)); v += sizeof(type); } }; typedef spi_tx_overflow_cnt_t spi_tx_overflow_cnt;
                    struct serial_1_crc_error_cnt_t { typedef uint8_t type; type serial_1_crc_error_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 78; void set(const uint8_t*& v){memcpy(&serial_1_crc_error_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &serial_1_crc_error_cnt, sizeof(type)); v += sizeof(type); } }; typedef serial_1_crc_error_cnt_t serial_1_crc_error_cnt;
                    struct serial_1_tx_overflow_cnt_t { typedef uint8_t type; type serial_1_tx_overflow_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 79; void set(const uint8_t*& v){memcpy(&serial_1_tx_overflow_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &serial_1_tx_overflow_cnt, sizeof(type)); v += sizeof(type); } }; typedef serial_1_tx_overflow_cnt_t serial_1_tx_overflow_cnt;
                    struct serial_2_crc_error_cnt_t { typedef uint8_t type; type serial_2_crc_error_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 80; void set(const uint8_t*& v){memcpy(&serial_2_crc_error_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &serial_2_crc_error_cnt, sizeof(type)); v += sizeof(type); } }; typedef serial_2_crc_error_cnt_t serial_2_crc_error_cnt;
                    struct serial_2_tx_overflow_cnt_t { typedef uint8_t type; type serial_2_tx_overflow_cnt; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 81; void set(const uint8_t*& v){memcpy(&serial_2_tx_overflow_cnt, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &serial_2_tx_overflow_cnt, sizeof(type)); v += sizeof(type); } }; typedef serial_2_tx_overflow_cnt_t serial_2_tx_overflow_cnt;
                    struct accel_status_t { typedef uint16_t type; type accel_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 82; void set(const uint8_t*& v){memcpy(&accel_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &accel_status, sizeof(type)); v += sizeof(type); } }; typedef accel_status_t accel_status;
                    struct remote_controller_status_t { typedef uint8_t type; type remote_controller_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 83; void set(const uint8_t*& v){memcpy(&remote_controller_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &remote_controller_status, sizeof(type)); v += sizeof(type); } }; typedef remote_controller_status_t remote_controller_status;
                    struct flight_mode_t { typedef uint8_t type; type flight_mode; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 84; void set(const uint8_t*& v){memcpy(&flight_mode, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &flight_mode, sizeof(type)); v += sizeof(type); } }; typedef flight_mode_t flight_mode;
                    struct camera_mode_t { typedef uint8_t type; type camera_mode; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 85; void set(const uint8_t*& v){memcpy(&camera_mode, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &camera_mode, sizeof(type)); v += sizeof(type); } }; typedef camera_mode_t camera_mode;
                    struct logging_mode_status_t { typedef uint8_t type; type logging_mode_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 86; void set(const uint8_t*& v){memcpy(&logging_mode_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &logging_mode_status, sizeof(type)); v += sizeof(type); } }; typedef logging_mode_status_t logging_mode_status;
                    struct logging_progress_t { typedef uint8_t type; type logging_progress; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 87; void set(const uint8_t*& v){memcpy(&logging_progress, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &logging_progress, sizeof(type)); v += sizeof(type); } }; typedef logging_progress_t logging_progress;
                    struct sdcard_status_t { typedef uint8_t type; type sdcard_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 88; void set(const uint8_t*& v){memcpy(&sdcard_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &sdcard_status, sizeof(type)); v += sizeof(type); } }; typedef sdcard_status_t sdcard_status;
                    struct system_status_t { typedef uint8_t type; type system_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 89; void set(const uint8_t*& v){memcpy(&system_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &system_status, sizeof(type)); v += sizeof(type); } }; typedef system_status_t system_status;
                    struct motor_status_t { typedef uint8_t type; type motor_status; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 90; void set(const uint8_t*& v){memcpy(&motor_status, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &motor_status, sizeof(type)); v += sizeof(type); } }; typedef motor_status_t motor_status;
                    struct adc_0_t { typedef uint16_t type; type adc_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 91; void set(const uint8_t*& v){memcpy(&adc_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &adc_0, sizeof(type)); v += sizeof(type); } }; typedef adc_0_t adc_0;
                    struct adc_1_t { typedef uint16_t type; type adc_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 92; void set(const uint8_t*& v){memcpy(&adc_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &adc_1, sizeof(type)); v += sizeof(type); } }; typedef adc_1_t adc_1;
                    struct adc_2_t { typedef uint16_t type; type adc_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 93; void set(const uint8_t*& v){memcpy(&adc_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &adc_2, sizeof(type)); v += sizeof(type); } }; typedef adc_2_t adc_2;
                    struct UserParamFloat_0_t { typedef float type; type UserParamFloat_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 94; void set(const uint8_t*& v){memcpy(&UserParamFloat_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_0, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_0_t UserParamFloat_0;
                    struct UserParamFloat_1_t { typedef float type; type UserParamFloat_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 95; void set(const uint8_t*& v){memcpy(&UserParamFloat_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_1, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_1_t UserParamFloat_1;
                    struct UserParamFloat_2_t { typedef float type; type UserParamFloat_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 96; void set(const uint8_t*& v){memcpy(&UserParamFloat_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_2, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_2_t UserParamFloat_2;
                    struct UserParamFloat_3_t { typedef float type; type UserParamFloat_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 97; void set(const uint8_t*& v){memcpy(&UserParamFloat_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_3, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_3_t UserParamFloat_3;
                    struct UserParamFloat_4_t { typedef float type; type UserParamFloat_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 98; void set(const uint8_t*& v){memcpy(&UserParamFloat_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_4, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_4_t UserParamFloat_4;
                    struct UserParamFloat_5_t { typedef float type; type UserParamFloat_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 99; void set(const uint8_t*& v){memcpy(&UserParamFloat_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_5, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_5_t UserParamFloat_5;
                    struct UserParamFloat_6_t { typedef float type; type UserParamFloat_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 100; void set(const uint8_t*& v){memcpy(&UserParamFloat_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_6, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_6_t UserParamFloat_6;
                    struct UserParamFloat_7_t { typedef float type; type UserParamFloat_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 101; void set(const uint8_t*& v){memcpy(&UserParamFloat_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_7, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_7_t UserParamFloat_7;
                    struct UserParamFloat_8_t { typedef float type; type UserParamFloat_8; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 102; void set(const uint8_t*& v){memcpy(&UserParamFloat_8, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_8, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_8_t UserParamFloat_8;
                    struct UserParamFloat_9_t { typedef float type; type UserParamFloat_9; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 103; void set(const uint8_t*& v){memcpy(&UserParamFloat_9, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamFloat_9, sizeof(type)); v += sizeof(type); } }; typedef UserParamFloat_9_t UserParamFloat_9;
                    struct UserParamInt8_0_t { typedef int8_t type; type UserParamInt8_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 104; void set(const uint8_t*& v){memcpy(&UserParamInt8_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_0, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_0_t UserParamInt8_0;
                    struct UserParamInt8_1_t { typedef int8_t type; type UserParamInt8_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 105; void set(const uint8_t*& v){memcpy(&UserParamInt8_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_1, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_1_t UserParamInt8_1;
                    struct UserParamInt8_2_t { typedef int8_t type; type UserParamInt8_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 106; void set(const uint8_t*& v){memcpy(&UserParamInt8_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_2, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_2_t UserParamInt8_2;
                    struct UserParamInt8_3_t { typedef int8_t type; type UserParamInt8_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 107; void set(const uint8_t*& v){memcpy(&UserParamInt8_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_3, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_3_t UserParamInt8_3;
                    struct UserParamInt8_4_t { typedef int8_t type; type UserParamInt8_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 108; void set(const uint8_t*& v){memcpy(&UserParamInt8_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_4, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_4_t UserParamInt8_4;
                    struct UserParamInt8_5_t { typedef int8_t type; type UserParamInt8_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 109; void set(const uint8_t*& v){memcpy(&UserParamInt8_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_5, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_5_t UserParamInt8_5;
                    struct UserParamInt8_6_t { typedef int8_t type; type UserParamInt8_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 110; void set(const uint8_t*& v){memcpy(&UserParamInt8_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_6, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_6_t UserParamInt8_6;
                    struct UserParamInt8_7_t { typedef int8_t type; type UserParamInt8_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 111; void set(const uint8_t*& v){memcpy(&UserParamInt8_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_7, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_7_t UserParamInt8_7;
                    struct UserParamInt8_8_t { typedef int8_t type; type UserParamInt8_8; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 112; void set(const uint8_t*& v){memcpy(&UserParamInt8_8, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_8, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_8_t UserParamInt8_8;
                    struct UserParamInt8_9_t { typedef int8_t type; type UserParamInt8_9; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 113; void set(const uint8_t*& v){memcpy(&UserParamInt8_9, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt8_9, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt8_9_t UserParamInt8_9;
                    struct UserParamInt16_0_t { typedef int16_t type; type UserParamInt16_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 114; void set(const uint8_t*& v){memcpy(&UserParamInt16_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_0, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_0_t UserParamInt16_0;
                    struct UserParamInt16_1_t { typedef int16_t type; type UserParamInt16_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 115; void set(const uint8_t*& v){memcpy(&UserParamInt16_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_1, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_1_t UserParamInt16_1;
                    struct UserParamInt16_2_t { typedef int16_t type; type UserParamInt16_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 116; void set(const uint8_t*& v){memcpy(&UserParamInt16_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_2, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_2_t UserParamInt16_2;
                    struct UserParamInt16_3_t { typedef int16_t type; type UserParamInt16_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 117; void set(const uint8_t*& v){memcpy(&UserParamInt16_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_3, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_3_t UserParamInt16_3;
                    struct UserParamInt16_4_t { typedef int16_t type; type UserParamInt16_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 118; void set(const uint8_t*& v){memcpy(&UserParamInt16_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_4, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_4_t UserParamInt16_4;
                    struct UserParamInt16_5_t { typedef int16_t type; type UserParamInt16_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 119; void set(const uint8_t*& v){memcpy(&UserParamInt16_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_5, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_5_t UserParamInt16_5;
                    struct UserParamInt16_6_t { typedef int16_t type; type UserParamInt16_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 120; void set(const uint8_t*& v){memcpy(&UserParamInt16_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_6, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_6_t UserParamInt16_6;
                    struct UserParamInt16_7_t { typedef int16_t type; type UserParamInt16_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 121; void set(const uint8_t*& v){memcpy(&UserParamInt16_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_7, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_7_t UserParamInt16_7;
                    struct UserParamInt16_8_t { typedef int16_t type; type UserParamInt16_8; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 122; void set(const uint8_t*& v){memcpy(&UserParamInt16_8, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_8, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_8_t UserParamInt16_8;
                    struct UserParamInt16_9_t { typedef int16_t type; type UserParamInt16_9; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 123; void set(const uint8_t*& v){memcpy(&UserParamInt16_9, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt16_9, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt16_9_t UserParamInt16_9;
                    struct UserParamInt32_0_t { typedef int32_t type; type UserParamInt32_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 124; void set(const uint8_t*& v){memcpy(&UserParamInt32_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_0, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_0_t UserParamInt32_0;
                    struct UserParamInt32_1_t { typedef int32_t type; type UserParamInt32_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 125; void set(const uint8_t*& v){memcpy(&UserParamInt32_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_1, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_1_t UserParamInt32_1;
                    struct UserParamInt32_2_t { typedef int32_t type; type UserParamInt32_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 126; void set(const uint8_t*& v){memcpy(&UserParamInt32_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_2, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_2_t UserParamInt32_2;
                    struct UserParamInt32_3_t { typedef int32_t type; type UserParamInt32_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 127; void set(const uint8_t*& v){memcpy(&UserParamInt32_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_3, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_3_t UserParamInt32_3;
                    struct UserParamInt32_4_t { typedef int32_t type; type UserParamInt32_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 128; void set(const uint8_t*& v){memcpy(&UserParamInt32_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_4, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_4_t UserParamInt32_4;
                    struct UserParamInt32_5_t { typedef int32_t type; type UserParamInt32_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 129; void set(const uint8_t*& v){memcpy(&UserParamInt32_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_5, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_5_t UserParamInt32_5;
                    struct UserParamInt32_6_t { typedef int32_t type; type UserParamInt32_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 130; void set(const uint8_t*& v){memcpy(&UserParamInt32_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_6, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_6_t UserParamInt32_6;
                    struct UserParamInt32_7_t { typedef int32_t type; type UserParamInt32_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 131; void set(const uint8_t*& v){memcpy(&UserParamInt32_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_7, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_7_t UserParamInt32_7;
                    struct UserParamInt32_8_t { typedef int32_t type; type UserParamInt32_8; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 132; void set(const uint8_t*& v){memcpy(&UserParamInt32_8, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_8, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_8_t UserParamInt32_8;
                    struct UserParamInt32_9_t { typedef int32_t type; type UserParamInt32_9; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 133; void set(const uint8_t*& v){memcpy(&UserParamInt32_9, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &UserParamInt32_9, sizeof(type)); v += sizeof(type); } }; typedef UserParamInt32_9_t UserParamInt32_9;
                    struct fAltCF_t { typedef float type; type fAltCF; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 134; void set(const uint8_t*& v){memcpy(&fAltCF, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &fAltCF, sizeof(type)); v += sizeof(type); } }; typedef fAltCF_t fAltCF;
                    struct fVelU_t { typedef float type; type fVelU; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 135; void set(const uint8_t*& v){memcpy(&fVelU, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &fVelU, sizeof(type)); v += sizeof(type); } }; typedef fVelU_t fVelU;
                    struct gps_longitude_origo_t { typedef int32_t type; type gps_longitude_origo; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 136; void set(const uint8_t*& v){memcpy(&gps_longitude_origo, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_longitude_origo, sizeof(type)); v += sizeof(type); } }; typedef gps_longitude_origo_t gps_longitude_origo;
                    struct gps_latitude_origo_t { typedef int32_t type; type gps_latitude_origo; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 137; void set(const uint8_t*& v){memcpy(&gps_latitude_origo, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_latitude_origo, sizeof(type)); v += sizeof(type); } }; typedef gps_latitude_origo_t gps_latitude_origo;
                    struct gps_altitude_origo_t { typedef int32_t type; type gps_altitude_origo; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 138; void set(const uint8_t*& v){memcpy(&gps_altitude_origo, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_altitude_origo, sizeof(type)); v += sizeof(type); } }; typedef gps_altitude_origo_t gps_altitude_origo;
                    struct gps_longitude_m_t { typedef float type; type gps_longitude_m; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 139; void set(const uint8_t*& v){memcpy(&gps_longitude_m, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_longitude_m, sizeof(type)); v += sizeof(type); } }; typedef gps_longitude_m_t gps_longitude_m;
                    struct gps_latitude_m_t { typedef float type; type gps_latitude_m; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 140; void set(const uint8_t*& v){memcpy(&gps_latitude_m, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_latitude_m, sizeof(type)); v += sizeof(type); } }; typedef gps_latitude_m_t gps_latitude_m;
                    struct gps_origo_taken_t { typedef char type; type gps_origo_taken; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 141; void set(const uint8_t*& v){memcpy(&gps_origo_taken, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &gps_origo_taken, sizeof(type)); v += sizeof(type); } }; typedef gps_origo_taken_t gps_origo_taken;
                    struct fHeadCF_t { typedef float type; type fHeadCF; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 142; void set(const uint8_t*& v){memcpy(&fHeadCF, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &fHeadCF, sizeof(type)); v += sizeof(type); } }; typedef fHeadCF_t fHeadCF;
                    struct mixer_input_0_at_fl_ms_t { typedef int16_t type; type mixer_input_0_at_fl_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 143; void set(const uint8_t*& v){memcpy(&mixer_input_0_at_fl_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &mixer_input_0_at_fl_ms, sizeof(type)); v += sizeof(type); } }; typedef mixer_input_0_at_fl_ms_t mixer_input_0_at_fl_ms;
                    struct mixer_input_1_at_fl_ms_t { typedef int16_t type; type mixer_input_1_at_fl_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 144; void set(const uint8_t*& v){memcpy(&mixer_input_1_at_fl_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &mixer_input_1_at_fl_ms, sizeof(type)); v += sizeof(type); } }; typedef mixer_input_1_at_fl_ms_t mixer_input_1_at_fl_ms;
                    struct mixer_input_2_at_fl_ms_t { typedef int16_t type; type mixer_input_2_at_fl_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 145; void set(const uint8_t*& v){memcpy(&mixer_input_2_at_fl_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &mixer_input_2_at_fl_ms, sizeof(type)); v += sizeof(type); } }; typedef mixer_input_2_at_fl_ms_t mixer_input_2_at_fl_ms;
                    struct mixer_input_3_at_fl_ms_t { typedef int16_t type; type mixer_input_3_at_fl_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 146; void set(const uint8_t*& v){memcpy(&mixer_input_3_at_fl_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &mixer_input_3_at_fl_ms, sizeof(type)); v += sizeof(type); } }; typedef mixer_input_3_at_fl_ms_t mixer_input_3_at_fl_ms;
                    struct mixer_input_4_at_fl_ms_t { typedef int16_t type; type mixer_input_4_at_fl_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 147; void set(const uint8_t*& v){memcpy(&mixer_input_4_at_fl_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &mixer_input_4_at_fl_ms, sizeof(type)); v += sizeof(type); } }; typedef mixer_input_4_at_fl_ms_t mixer_input_4_at_fl_ms;
                    struct mixer_input_5_at_fl_ms_t { typedef int16_t type; type mixer_input_5_at_fl_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 148; void set(const uint8_t*& v){memcpy(&mixer_input_5_at_fl_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &mixer_input_5_at_fl_ms, sizeof(type)); v += sizeof(type); } }; typedef mixer_input_5_at_fl_ms_t mixer_input_5_at_fl_ms;
                    struct mixer_input_6_at_fl_ms_t { typedef int16_t type; type mixer_input_6_at_fl_ms; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 149; void set(const uint8_t*& v){memcpy(&mixer_input_6_at_fl_ms, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &mixer_input_6_at_fl_ms, sizeof(type)); v += sizeof(type); } }; typedef mixer_input_6_at_fl_ms_t mixer_input_6_at_fl_ms;
                    struct outer_loop_output_0_t { typedef float type; type outer_loop_output_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 150; void set(const uint8_t*& v){memcpy(&outer_loop_output_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &outer_loop_output_0, sizeof(type)); v += sizeof(type); } }; typedef outer_loop_output_0_t outer_loop_output_0;
                    struct outer_loop_output_1_t { typedef float type; type outer_loop_output_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 151; void set(const uint8_t*& v){memcpy(&outer_loop_output_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &outer_loop_output_1, sizeof(type)); v += sizeof(type); } }; typedef outer_loop_output_1_t outer_loop_output_1;
                    struct outer_loop_output_2_t { typedef float type; type outer_loop_output_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 152; void set(const uint8_t*& v){memcpy(&outer_loop_output_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &outer_loop_output_2, sizeof(type)); v += sizeof(type); } }; typedef outer_loop_output_2_t outer_loop_output_2;
                    struct outer_loop_output_3_t { typedef float type; type outer_loop_output_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 153; void set(const uint8_t*& v){memcpy(&outer_loop_output_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &outer_loop_output_3, sizeof(type)); v += sizeof(type); } }; typedef outer_loop_output_3_t outer_loop_output_3;
                    struct outer_loop_output_4_t { typedef float type; type outer_loop_output_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 154; void set(const uint8_t*& v){memcpy(&outer_loop_output_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &outer_loop_output_4, sizeof(type)); v += sizeof(type); } }; typedef outer_loop_output_4_t outer_loop_output_4;
                    struct outer_loop_output_5_t { typedef float type; type outer_loop_output_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 155; void set(const uint8_t*& v){memcpy(&outer_loop_output_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &outer_loop_output_5, sizeof(type)); v += sizeof(type); } }; typedef outer_loop_output_5_t outer_loop_output_5;
                    struct outer_loop_output_6_t { typedef float type; type outer_loop_output_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 156; void set(const uint8_t*& v){memcpy(&outer_loop_output_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &outer_loop_output_6, sizeof(type)); v += sizeof(type); } }; typedef outer_loop_output_6_t outer_loop_output_6;
                    struct outer_loop_output_7_t { typedef float type; type outer_loop_output_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 157; void set(const uint8_t*& v){memcpy(&outer_loop_output_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &outer_loop_output_7, sizeof(type)); v += sizeof(type); } }; typedef outer_loop_output_7_t outer_loop_output_7;
                }

                namespace SUser {
                    struct flags_t { typedef uint64_t type; type flags; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 0; void set(const uint8_t*& v){memcpy(&flags, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &flags, sizeof(type)); v += sizeof(type); } }; typedef flags_t flags;
                    struct params_32f_0_t { typedef float type; type params_32f_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 1; void set(const uint8_t*& v){memcpy(&params_32f_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_0, sizeof(type)); v += sizeof(type); } }; typedef params_32f_0_t params_32f_0;
                    struct params_32f_1_t { typedef float type; type params_32f_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 2; void set(const uint8_t*& v){memcpy(&params_32f_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_1, sizeof(type)); v += sizeof(type); } }; typedef params_32f_1_t params_32f_1;
                    struct params_32f_2_t { typedef float type; type params_32f_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 3; void set(const uint8_t*& v){memcpy(&params_32f_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_2, sizeof(type)); v += sizeof(type); } }; typedef params_32f_2_t params_32f_2;
                    struct params_32f_3_t { typedef float type; type params_32f_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 4; void set(const uint8_t*& v){memcpy(&params_32f_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_3, sizeof(type)); v += sizeof(type); } }; typedef params_32f_3_t params_32f_3;
                    struct params_32f_4_t { typedef float type; type params_32f_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 5; void set(const uint8_t*& v){memcpy(&params_32f_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_4, sizeof(type)); v += sizeof(type); } }; typedef params_32f_4_t params_32f_4;
                    struct params_32f_5_t { typedef float type; type params_32f_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 6; void set(const uint8_t*& v){memcpy(&params_32f_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_5, sizeof(type)); v += sizeof(type); } }; typedef params_32f_5_t params_32f_5;
                    struct params_32f_6_t { typedef float type; type params_32f_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 7; void set(const uint8_t*& v){memcpy(&params_32f_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_6, sizeof(type)); v += sizeof(type); } }; typedef params_32f_6_t params_32f_6;
                    struct params_32f_7_t { typedef float type; type params_32f_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 8; void set(const uint8_t*& v){memcpy(&params_32f_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_7, sizeof(type)); v += sizeof(type); } }; typedef params_32f_7_t params_32f_7;
                    struct params_32f_8_t { typedef float type; type params_32f_8; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 9; void set(const uint8_t*& v){memcpy(&params_32f_8, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_8, sizeof(type)); v += sizeof(type); } }; typedef params_32f_8_t params_32f_8;
                    struct params_32f_9_t { typedef float type; type params_32f_9; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 10; void set(const uint8_t*& v){memcpy(&params_32f_9, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32f_9, sizeof(type)); v += sizeof(type); } }; typedef params_32f_9_t params_32f_9;
                    struct params_8i_0_t { typedef int8_t type; type params_8i_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 11; void set(const uint8_t*& v){memcpy(&params_8i_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_0, sizeof(type)); v += sizeof(type); } }; typedef params_8i_0_t params_8i_0;
                    struct params_8i_1_t { typedef int8_t type; type params_8i_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 12; void set(const uint8_t*& v){memcpy(&params_8i_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_1, sizeof(type)); v += sizeof(type); } }; typedef params_8i_1_t params_8i_1;
                    struct params_8i_2_t { typedef int8_t type; type params_8i_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 13; void set(const uint8_t*& v){memcpy(&params_8i_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_2, sizeof(type)); v += sizeof(type); } }; typedef params_8i_2_t params_8i_2;
                    struct params_8i_3_t { typedef int8_t type; type params_8i_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 14; void set(const uint8_t*& v){memcpy(&params_8i_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_3, sizeof(type)); v += sizeof(type); } }; typedef params_8i_3_t params_8i_3;
                    struct params_8i_4_t { typedef int8_t type; type params_8i_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 15; void set(const uint8_t*& v){memcpy(&params_8i_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_4, sizeof(type)); v += sizeof(type); } }; typedef params_8i_4_t params_8i_4;
                    struct params_8i_5_t { typedef int8_t type; type params_8i_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 16; void set(const uint8_t*& v){memcpy(&params_8i_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_5, sizeof(type)); v += sizeof(type); } }; typedef params_8i_5_t params_8i_5;
                    struct params_8i_6_t { typedef int8_t type; type params_8i_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 17; void set(const uint8_t*& v){memcpy(&params_8i_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_6, sizeof(type)); v += sizeof(type); } }; typedef params_8i_6_t params_8i_6;
                    struct params_8i_7_t { typedef int8_t type; type params_8i_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 18; void set(const uint8_t*& v){memcpy(&params_8i_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_7, sizeof(type)); v += sizeof(type); } }; typedef params_8i_7_t params_8i_7;
                    struct params_8i_8_t { typedef int8_t type; type params_8i_8; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 19; void set(const uint8_t*& v){memcpy(&params_8i_8, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_8, sizeof(type)); v += sizeof(type); } }; typedef params_8i_8_t params_8i_8;
                    struct params_8i_9_t { typedef int8_t type; type params_8i_9; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 20; void set(const uint8_t*& v){memcpy(&params_8i_9, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_8i_9, sizeof(type)); v += sizeof(type); } }; typedef params_8i_9_t params_8i_9;
                    struct params_16i_0_t { typedef int16_t type; type params_16i_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 21; void set(const uint8_t*& v){memcpy(&params_16i_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_0, sizeof(type)); v += sizeof(type); } }; typedef params_16i_0_t params_16i_0;
                    struct params_16i_1_t { typedef int16_t type; type params_16i_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 22; void set(const uint8_t*& v){memcpy(&params_16i_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_1, sizeof(type)); v += sizeof(type); } }; typedef params_16i_1_t params_16i_1;
                    struct params_16i_2_t { typedef int16_t type; type params_16i_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 23; void set(const uint8_t*& v){memcpy(&params_16i_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_2, sizeof(type)); v += sizeof(type); } }; typedef params_16i_2_t params_16i_2;
                    struct params_16i_3_t { typedef int16_t type; type params_16i_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 24; void set(const uint8_t*& v){memcpy(&params_16i_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_3, sizeof(type)); v += sizeof(type); } }; typedef params_16i_3_t params_16i_3;
                    struct params_16i_4_t { typedef int16_t type; type params_16i_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 25; void set(const uint8_t*& v){memcpy(&params_16i_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_4, sizeof(type)); v += sizeof(type); } }; typedef params_16i_4_t params_16i_4;
                    struct params_16i_5_t { typedef int16_t type; type params_16i_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 26; void set(const uint8_t*& v){memcpy(&params_16i_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_5, sizeof(type)); v += sizeof(type); } }; typedef params_16i_5_t params_16i_5;
                    struct params_16i_6_t { typedef int16_t type; type params_16i_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 27; void set(const uint8_t*& v){memcpy(&params_16i_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_6, sizeof(type)); v += sizeof(type); } }; typedef params_16i_6_t params_16i_6;
                    struct params_16i_7_t { typedef int16_t type; type params_16i_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 28; void set(const uint8_t*& v){memcpy(&params_16i_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_7, sizeof(type)); v += sizeof(type); } }; typedef params_16i_7_t params_16i_7;
                    struct params_16i_8_t { typedef int16_t type; type params_16i_8; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 29; void set(const uint8_t*& v){memcpy(&params_16i_8, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_8, sizeof(type)); v += sizeof(type); } }; typedef params_16i_8_t params_16i_8;
                    struct params_16i_9_t { typedef int16_t type; type params_16i_9; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 30; void set(const uint8_t*& v){memcpy(&params_16i_9, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_16i_9, sizeof(type)); v += sizeof(type); } }; typedef params_16i_9_t params_16i_9;
                    struct params_32i_0_t { typedef int32_t type; type params_32i_0; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 31; void set(const uint8_t*& v){memcpy(&params_32i_0, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_0, sizeof(type)); v += sizeof(type); } }; typedef params_32i_0_t params_32i_0;
                    struct params_32i_1_t { typedef int32_t type; type params_32i_1; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 32; void set(const uint8_t*& v){memcpy(&params_32i_1, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_1, sizeof(type)); v += sizeof(type); } }; typedef params_32i_1_t params_32i_1;
                    struct params_32i_2_t { typedef int32_t type; type params_32i_2; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 33; void set(const uint8_t*& v){memcpy(&params_32i_2, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_2, sizeof(type)); v += sizeof(type); } }; typedef params_32i_2_t params_32i_2;
                    struct params_32i_3_t { typedef int32_t type; type params_32i_3; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 34; void set(const uint8_t*& v){memcpy(&params_32i_3, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_3, sizeof(type)); v += sizeof(type); } }; typedef params_32i_3_t params_32i_3;
                    struct params_32i_4_t { typedef int32_t type; type params_32i_4; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 35; void set(const uint8_t*& v){memcpy(&params_32i_4, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_4, sizeof(type)); v += sizeof(type); } }; typedef params_32i_4_t params_32i_4;
                    struct params_32i_5_t { typedef int32_t type; type params_32i_5; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 36; void set(const uint8_t*& v){memcpy(&params_32i_5, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_5, sizeof(type)); v += sizeof(type); } }; typedef params_32i_5_t params_32i_5;
                    struct params_32i_6_t { typedef int32_t type; type params_32i_6; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 37; void set(const uint8_t*& v){memcpy(&params_32i_6, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_6, sizeof(type)); v += sizeof(type); } }; typedef params_32i_6_t params_32i_6;
                    struct params_32i_7_t { typedef int32_t type; type params_32i_7; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 38; void set(const uint8_t*& v){memcpy(&params_32i_7, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_7, sizeof(type)); v += sizeof(type); } }; typedef params_32i_7_t params_32i_7;
                    struct params_32i_8_t { typedef int32_t type; type params_32i_8; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 39; void set(const uint8_t*& v){memcpy(&params_32i_8, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_8, sizeof(type)); v += sizeof(type); } }; typedef params_32i_8_t params_32i_8;
                    struct params_32i_9_t { typedef int32_t type; type params_32i_9; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 40; void set(const uint8_t*& v){memcpy(&params_32i_9, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &params_32i_9, sizeof(type)); v += sizeof(type); } }; typedef params_32i_9_t params_32i_9;
                }

                namespace SFlightTarget {
                    struct flags_t { typedef uint8_t type; type flags; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 0; void set(const uint8_t*& v){memcpy(&flags, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &flags, sizeof(type)); v += sizeof(type); } }; typedef flags_t flags;
                    struct longitude_t { typedef float type; type longitude; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 1; void set(const uint8_t*& v){memcpy(&longitude, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &longitude, sizeof(type)); v += sizeof(type); } }; typedef longitude_t longitude;
                    struct latitude_t { typedef float type; type latitude; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 2; void set(const uint8_t*& v){memcpy(&latitude, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &latitude, sizeof(type)); v += sizeof(type); } }; typedef latitude_t latitude;
                    struct altitude_t { typedef float type; type altitude; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 3; void set(const uint8_t*& v){memcpy(&altitude, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &altitude, sizeof(type)); v += sizeof(type); } }; typedef altitude_t altitude;
                    struct heading_t { typedef float type; type heading; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 4; void set(const uint8_t*& v){memcpy(&heading, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &heading, sizeof(type)); v += sizeof(type); } }; typedef heading_t heading;
                }

                namespace SCmd {
                    struct cId_t { typedef uint8_t type; type cId; static const size_t size = sizeof(type); static const uint8_t c = 1; static const int n = 0; void set(const uint8_t*& v){memcpy(&cId, v, sizeof(type)); v += sizeof(type); } void get(uint8_t*& v) const {memcpy(v, &cId, sizeof(type)); v += sizeof(type); } }; typedef cId_t cId;
                }
