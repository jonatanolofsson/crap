                namespace request_part {
                    uint16_t everyNth;0
                    template<int N>
                    uint8_t ids[N];
                    uint8_t ids_cnt;
                }

                namespace SSMCU {
                    typedef request_part::DataRequestPart<MSG_SMCU_DATA_PART_REQUEST, 66> Part;

                    uint32_t iReftime;0
                    int16_t gyro_data[3];
                    int16_t gyro_raw[3];
                    int16_t gyro_temp_raw[3];
                    int16_t accel_raw[3];
                    int16_t micromag[3];
                    int16_t ahrs[3];
                    int16_t compass_heading;
                    int16_t rc_sticks[7];
                    int16_t battery_voltage;
                    int8_t cGPSValid;
                    int32_t iLatDeg;
                    int32_t iLonDeg;
                    float fAlt;
                    int32_t iGpsLatDeg;
                    int32_t iGpsLonDeg;
                    int32_t iGpsAlt;
                    int16_t siGpsYawDeg;
                    uint8_t ucGpsStatus;
                    uint8_t ucGpsStatusFlags;
                    uint16_t gDop;
                    uint16_t pDop;
                    uint16_t hDop;
                    uint16_t vDop;
                    uint8_t num_SV;
                    int16_t iGpsVelN;
                    int16_t iGpsVelE;
                    int16_t iGpsVelD;
                    uint16_t iGpsSAcc;
                    uint16_t iGpsPAcc;
                    uint16_t iGpsHAcc;
                    uint16_t iGpsVAcc;
                    uint8_t system_status;
                    uint16_t usiError;
                    uint8_t remote_controller_status;
                    uint16_t adc[3];
                    uint8_t ext_uart_crc_error_cnt;
                    uint8_t ext_uart_tx_overflow_cnt;
                    float fAltCF;
                    float fVelU;
                    int gps_longitude_origo;
                    int gps_latitude_origo;
                    int gps_altitude_origo;
                    char gps_origo_taken;
                    float gps_longitude_m;
                    float gps_latitude_m;
                    float fHeadCF;
                }

                namespace SCMCU {
                    typedef request_part::DataRequestPart<MSG_CMCU_DATA_PART_REQUEST, 157> Part;

                    int8_t id;0
                    uint32_t time;
                    uint32_t logtime;
                    float phi;
                    float theta;
                    float psi;
                    float compass_heading;
                    float phi_dot_raw;
                    float theta_dot_raw;
                    float psi_dot_raw;
                    float phi_dot;
                    float theta_dot;
                    float psi_dot;
                    int16_t siPhiTemp;
                    int16_t siThetaTemp;
                    int16_t siPsiTemp;
                    float accel_x_raw;
                    float accel_y_raw;
                    float accel_z_raw;
                    float micromag_x;
                    float micromag_y;
                    float micromag_z;
                    float hp;
                    float fPressureAltitude;
                    int8_t cGPSValid;
                    uint8_t cGPSStatus;
                    int32_t iGpsLatDeg;
                    int32_t iGpsLonDeg;
                    uint32_t iGpsAlt;
                    uint8_t ucGpsStatusFlags;
                    uint16_t gDop;
                    uint16_t pDop;
                    uint16_t hDop;
                    uint16_t vDop;
                    uint8_t num_SV;
                    int16_t iGpsVelN;
                    int16_t iGpsVelE;
                    int16_t iGpsVelD;
                    uint16_t iGpsSAcc;
                    uint16_t iGpsPAcc;
                    uint16_t iGpsHAcc;
                    uint16_t iGpsVAcc;
                    float GpsHeadingDeg;
                    uint16_t rc_sticks_0;
                    uint16_t rc_sticks_1;
                    uint16_t rc_sticks_2;
                    uint16_t rc_sticks_3;
                    uint16_t rc_sticks_4;
                    uint16_t rc_sticks_5;
                    uint16_t rc_sticks_6;
                    uint16_t servo_output_0;
                    uint16_t servo_output_1;
                    uint16_t servo_output_2;
                    uint16_t servo_output_3;
                    uint16_t servo_output_4;
                    uint16_t servo_output_5;
                    uint16_t servo_output_6;
                    int16_t servo_mixer_input_0;
                    int16_t servo_mixer_input_1;
                    int16_t servo_mixer_input_2;
                    int16_t servo_mixer_input_3;
                    int16_t servo_mixer_input_4;
                    int16_t servo_mixer_input_5;
                    int16_t servo_mixer_input_6;
                    uint8_t rc_aileron_at_ms;
                    uint8_t rc_elevator_at_ms;
                    uint8_t rc_rudder_at_ms;
                    uint8_t rc_throttle_at_ms;
                    uint8_t rc_camera_pan_at_ms;
                    uint8_t rc_camera_tilt_at_ms;
                    int32_t targetLonDeg;
                    int32_t targetLatDeg;
                    float targetAltM;
                    float targetHeadingDeg;
                    int16_t battery_voltage;
                    int8_t spi_status;
                    uint8_t spi_crc_error_cnt;
                    uint8_t spi_tx_overflow_cnt;
                    uint8_t serial_1_crc_error_cnt;
                    uint8_t serial_1_tx_overflow_cnt;
                    uint8_t serial_2_crc_error_cnt;
                    uint8_t serial_2_tx_overflow_cnt;
                    uint16_t accel_status;
                    uint8_t remote_controller_status;
                    uint8_t flight_mode;
                    uint8_t camera_mode;
                    uint8_t logging_mode_status;
                    uint8_t logging_progress;
                    uint8_t sdcard_status;
                    uint8_t system_status;
                    uint8_t motor_status;
                    uint16_t adc_0;
                    uint16_t adc_1;
                    uint16_t adc_2;
                    float UserParamFloat_0;
                    float UserParamFloat_1;
                    float UserParamFloat_2;
                    float UserParamFloat_3;
                    float UserParamFloat_4;
                    float UserParamFloat_5;
                    float UserParamFloat_6;
                    float UserParamFloat_7;
                    float UserParamFloat_8;
                    float UserParamFloat_9;
                    int8_t UserParamInt8_0;
                    int8_t UserParamInt8_1;
                    int8_t UserParamInt8_2;
                    int8_t UserParamInt8_3;
                    int8_t UserParamInt8_4;
                    int8_t UserParamInt8_5;
                    int8_t UserParamInt8_6;
                    int8_t UserParamInt8_7;
                    int8_t UserParamInt8_8;
                    int8_t UserParamInt8_9;
                    int16_t UserParamInt16_0;
                    int16_t UserParamInt16_1;
                    int16_t UserParamInt16_2;
                    int16_t UserParamInt16_3;
                    int16_t UserParamInt16_4;
                    int16_t UserParamInt16_5;
                    int16_t UserParamInt16_6;
                    int16_t UserParamInt16_7;
                    int16_t UserParamInt16_8;
                    int16_t UserParamInt16_9;
                    int32_t UserParamInt32_0;
                    int32_t UserParamInt32_1;
                    int32_t UserParamInt32_2;
                    int32_t UserParamInt32_3;
                    int32_t UserParamInt32_4;
                    int32_t UserParamInt32_5;
                    int32_t UserParamInt32_6;
                    int32_t UserParamInt32_7;
                    int32_t UserParamInt32_8;
                    int32_t UserParamInt32_9;
                    float fAltCF;
                    float fVelU;
                    int32_t gps_longitude_origo;
                    int32_t gps_latitude_origo;
                    int32_t gps_altitude_origo;
                    float gps_longitude_m;
                    float gps_latitude_m;
                    char gps_origo_taken;
                    float fHeadCF;
                    int16_t mixer_input_0_at_fl_ms;
                    int16_t mixer_input_1_at_fl_ms;
                    int16_t mixer_input_2_at_fl_ms;
                    int16_t mixer_input_3_at_fl_ms;
                    int16_t mixer_input_4_at_fl_ms;
                    int16_t mixer_input_5_at_fl_ms;
                    int16_t mixer_input_6_at_fl_ms;
                    float outer_loop_output_0;
                    float outer_loop_output_1;
                    float outer_loop_output_2;
                    float outer_loop_output_3;
                    float outer_loop_output_4;
                    float outer_loop_output_5;
                    float outer_loop_output_6;
                    float outer_loop_output_7;
                }

                namespace SUser {
                    uint64_t flags;0
                    float params_32f[10];
                    int8_t params_8i[10];
                    int16_t params_16i[10];
                    int32_t params_32i[10];
                }

                namespace SFlightTarget {
                    uint8_t flags;0
                    float longitude;
                    float latitude;
                    float altitude;
                    float heading;
                }

                namespace SCmd {
                    uint8_t cId;0
                }
